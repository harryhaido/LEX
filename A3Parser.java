
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Mar 03 08:56:47 EST 2023
//----------------------------------------------------

import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Mar 03 08:56:47 EST 2023
  */
public class A3Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public A3Parser() {super();}

  /** Constructor which sets the default scanner. */
  public A3Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\011\000\002\005\010\000\002\006\002\000" +
    "\002\006\003\000\002\006\005\000\002\007\004\000\002" +
    "\010\005\000\002\012\003\000\002\012\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\013\005\000\002\013\004\000\002\014\006\000\002" +
    "\014\006\000\002\015\005\000\002\016\007\000\002\016" +
    "\011\000\002\017\011\000\002\020\011\000\002\021\005" +
    "\000\002\021\005\000\002\021\003\000\002\022\003\000" +
    "\002\022\005\000\002\022\005\000\002\023\003\000\002" +
    "\023\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\006\000\002\024\005\000\002\024\005\000\002\025\003" +
    "\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\010\027\006\030\011\031\007\001\002\000" +
    "\004\002\144\001\002\000\006\026\013\032\014\001\002" +
    "\000\006\026\ufffc\032\ufffc\001\002\000\006\026\ufffd\032" +
    "\ufffd\001\002\000\012\002\001\027\006\030\011\031\007" +
    "\001\002\000\006\026\ufffe\032\ufffe\001\002\000\004\002" +
    "\uffff\001\002\000\004\032\137\001\002\000\004\010\015" +
    "\001\002\000\012\011\ufff9\027\006\030\011\031\007\001" +
    "\002\000\004\032\136\001\002\000\006\011\ufff8\012\134" +
    "\001\002\000\004\011\021\001\002\000\004\024\023\001" +
    "\002\000\012\002\ufffa\027\ufffa\030\ufffa\031\ufffa\001\002" +
    "\000\024\017\035\020\025\021\034\023\032\024\023\027" +
    "\006\030\011\031\007\032\033\001\002\000\030\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\001\002\000\004\010\126" +
    "\001\002\000\030\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\001\002\000\030\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\001\002\000\030\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\001\002\000\004\025\125\001\002\000\010\010\056\032" +
    "\054\033\053\001\002\000\004\014\047\001\002\000\004" +
    "\010\110\001\002\000\004\010\102\001\002\000\004\032" +
    "\044\001\002\000\030\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\001\002\000\030\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\001\002\000\026\017\035\020\025\021\034\023\032" +
    "\024\023\025\ufff4\027\006\030\011\031\007\032\033\001" +
    "\002\000\030\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\027\uffee\030\uffee\031\uffee\032\uffee\001" +
    "\002\000\004\025\ufff3\001\002\000\006\013\046\014\047" +
    "\001\002\000\030\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\001\002\000\030\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\001\002\000\012\010\056\032\054\033\053\034\051\001" +
    "\002\000\024\004\uffe0\005\uffe0\006\065\007\064\011\uffe0" +
    "\012\uffe0\013\uffe0\015\uffe0\016\uffe0\001\002\000\004\013" +
    "\101\001\002\000\010\004\061\005\062\013\100\001\002" +
    "\000\024\004\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\015\uffdc\016\uffdc\001\002\000\026\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\071\011\uffdb\012\uffdb\013" +
    "\uffdb\015\uffdb\016\uffdb\001\002\000\024\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\016" +
    "\uffdf\001\002\000\010\010\056\032\054\033\053\001\002" +
    "\000\010\004\061\005\062\011\060\001\002\000\024\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda" +
    "\015\uffda\016\uffda\001\002\000\010\010\056\032\054\033" +
    "\053\001\002\000\010\010\056\032\054\033\053\001\002" +
    "\000\024\004\uffe1\005\uffe1\006\065\007\064\011\uffe1\012" +
    "\uffe1\013\uffe1\015\uffe1\016\uffe1\001\002\000\010\010\056" +
    "\032\054\033\053\001\002\000\010\010\056\032\054\033" +
    "\053\001\002\000\024\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\011\uffde\012\uffde\013\uffde\015\uffde\016\uffde\001\002\000" +
    "\024\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\015\uffdd\016\uffdd\001\002\000\024\004\uffe2\005" +
    "\uffe2\006\065\007\064\011\uffe2\012\uffe2\013\uffe2\015\uffe2" +
    "\016\uffe2\001\002\000\012\010\056\011\072\032\054\033" +
    "\053\001\002\000\024\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\015\uffd9\016\uffd9\001\002\000" +
    "\012\004\061\005\062\011\uffd5\012\uffd5\001\002\000\006" +
    "\011\076\012\075\001\002\000\010\010\056\032\054\033" +
    "\053\001\002\000\024\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\015\uffd8\016\uffd8\001\002\000" +
    "\012\004\061\005\062\011\uffd4\012\uffd4\001\002\000\030" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\001\002\000\030" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\001\002\000\010" +
    "\010\056\032\054\033\053\001\002\000\010\004\061\005" +
    "\062\012\104\001\002\000\004\034\105\001\002\000\004" +
    "\011\106\001\002\000\004\013\107\001\002\000\030\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\001\002\000\010\010" +
    "\056\032\054\033\053\001\002\000\012\004\061\005\062" +
    "\015\117\016\120\001\002\000\004\011\113\001\002\000" +
    "\024\017\035\020\025\021\034\023\032\024\023\027\006" +
    "\030\011\031\007\032\033\001\002\000\030\017\uffe6\020" +
    "\uffe6\021\uffe6\022\115\023\uffe6\024\uffe6\025\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\032\uffe6\001\002\000\024\017\035\020" +
    "\025\021\034\023\032\024\023\027\006\030\011\031\007" +
    "\032\033\001\002\000\030\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\001\002\000\010\010\056\032\054\033\053\001" +
    "\002\000\010\010\056\032\054\033\053\001\002\000\010" +
    "\004\061\005\062\011\uffd6\001\002\000\010\004\061\005" +
    "\062\011\uffd7\001\002\000\010\004\061\005\062\013\124" +
    "\001\002\000\030\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\001\002\000\032\002\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\001\002\000\004\032\127\001\002\000\004\012" +
    "\130\001\002\000\004\034\131\001\002\000\004\011\132" +
    "\001\002\000\004\013\133\001\002\000\030\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\001\002\000\012\011\ufff9\027" +
    "\006\030\011\031\007\001\002\000\004\011\ufff7\001\002" +
    "\000\006\011\ufff6\012\ufff6\001\002\000\004\010\140\001" +
    "\002\000\012\011\ufff9\027\006\030\011\031\007\001\002" +
    "\000\004\011\142\001\002\000\004\024\023\001\002\000" +
    "\012\002\ufffb\027\ufffb\030\ufffb\031\ufffb\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\010\003\003\004\004\005\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\011\004\004\005\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\015\006\017\007\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\021\001\001\000\002\001\001\000\026\004\035\010" +
    "\036\011\040\012\030\013\025\014\027\015\023\016\041" +
    "\017\037\020\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\122\022\047\023\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\035\010\036\011\040\012\042\013\025" +
    "\014\027\015\023\016\041\017\037\020\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\051\022\047\023" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\056\022\047\023\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\067\023\054\001" +
    "\001\000\006\022\062\023\054\001\001\000\002\001\001" +
    "\000\004\023\066\001\001\000\004\023\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\072\022\047\023\054\025\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\076" +
    "\022\047\023\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\102" +
    "\022\047\023\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\110\022\047\023\054\024\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\035\010\036" +
    "\011\113\013\025\014\027\015\023\016\041\017\037\020" +
    "\026\001\001\000\002\001\001\000\024\004\035\010\036" +
    "\011\115\013\025\014\027\015\023\016\041\017\037\020" +
    "\026\001\001\000\002\001\001\000\010\021\121\022\047" +
    "\023\054\001\001\000\010\021\120\022\047\023\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\015\006\134\007" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\015\006\140\007\016\001\001\000" +
    "\002\001\001\000\004\010\142\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A3Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A3Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A3Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$A3Parser$actions {
  private final A3Parser parser;

  /** Constructor */
  CUP$A3Parser$actions(A3Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$A3Parser$do_action(
    int                        CUP$A3Parser$act_num,
    java_cup.runtime.lr_parser CUP$A3Parser$parser,
    java.util.Stack            CUP$A3Parser$stack,
    int                        CUP$A3Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A3Parser$result;

      /* select the action based on the action number */
      switch (CUP$A3Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ActualParams ::= ActualParams COMMA Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(19/*ActualParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ActualParams ::= Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(19/*ActualParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BoolExpression ::= Expression NEQUAL Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(18/*BoolExpression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BoolExpression ::= Expression EEQUAL Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(18/*BoolExpression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PrimaryExpr ::= IDENTIFIER LPAREN ActualParams RPAREN 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PrimaryExpr ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PrimaryExpr ::= LPAREN Expression RPAREN 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PrimaryExpr ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PrimaryExpr ::= NUMBER 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MultiplicativeExpr ::= MultiplicativeExpr DIVIDE PrimaryExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MultiplicativeExpr ::= MultiplicativeExpr TIMES PrimaryExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MultiplicativeExpr ::= PrimaryExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= MultiplicativeExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= Expression MINUS MultiplicativeExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression ::= Expression PLUS MultiplicativeExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ReadStmt ::= READ LPAREN IDENTIFIER COMMA QUOTE RPAREN SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(14/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // WriteStmt ::= WRITE LPAREN Expression COMMA QUOTE RPAREN SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(13/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IfStmt ::= IF LPAREN BoolExpression RPAREN Statement ELSE Statement 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(12/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IfStmt ::= IF LPAREN BoolExpression RPAREN Statement 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(12/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ReturnStmt ::= RETURN Expression SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(11/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AssignStmt ::= IDENTIFIER ASSIGN QUOTE SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(10/*AssignStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AssignStmt ::= IDENTIFIER ASSIGN Expression SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(10/*AssignStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LocalVarDecl ::= Type AssignStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(9/*LocalVarDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LocalVarDecl ::= Type IDENTIFIER SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(9/*LocalVarDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= IfStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= ReturnStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= AssignStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= LocalVarDecl 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= Block 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statements ::= Statement Statements 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*Statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statements ::= Statement 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*Statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Block ::= BEGIN Statements END 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(6/*Block*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FormalParam ::= Type IDENTIFIER 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(5/*FormalParam*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FormalParams ::= FormalParam COMMA FormalParams 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FormalParams ::= FormalParam 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FormalParams ::= 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MethodDecl ::= Type IDENTIFIER LPAREN FormalParams RPAREN Block 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MethodDecl ::= Type MAIN IDENTIFIER LPAREN FormalParams RPAREN Block 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Type ::= STRING 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(2/*Type*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Type ::= REAL 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(2/*Type*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Type ::= INT 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(2/*Type*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MethodDecl Program 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).value;
		 RESULT = e + 1; 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).value;
		RESULT = start_val;
              CUP$A3Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$A3Parser$parser.done_parsing();
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MethodDecl 
            {
              Integer RESULT = null;
		 RESULT = 1; 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

